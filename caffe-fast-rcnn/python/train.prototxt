name: "VGG_ILSVRC_16_layers"
layer {
  name: 'input-data'
  type: 'Python'
  top: 'data'
  top: 'im_info'
  top: 'gt_boxes'
  top: 'need_backprop'
  top: 'dc_label'
  python_param {
    module: 'roi_data_da_layer.layer'
    layer: 'RoIDataDALayer'
    param_str: "'num_classes': 9"
  }
}

layer {
  name: "conv1_1"
  type: "Convolution"
  bottom: "data"
  top: "conv1_1"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu1_1"
  type: "ReLU"
  bottom: "conv1_1"
  top: "conv1_1"
}
layer {
  name: "conv1_2"
  type: "Convolution"
  bottom: "conv1_1"
  top: "conv1_2"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu1_2"
  type: "ReLU"
  bottom: "conv1_2"
  top: "conv1_2"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1_2"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2_1"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2_1"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu2_1"
  type: "ReLU"
  bottom: "conv2_1"
  top: "conv2_1"
}
layer {
  name: "conv2_2"
  type: "Convolution"
  bottom: "conv2_1"
  top: "conv2_2"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu2_2"
  type: "ReLU"
  bottom: "conv2_2"
  top: "conv2_2"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2_2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv3_1"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3_1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3_1"
  type: "ReLU"
  bottom: "conv3_1"
  top: "conv3_1"
}
layer {
  name: "conv3_2"
  type: "Convolution"
  bottom: "conv3_1"
  top: "conv3_2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3_2"
  type: "ReLU"
  bottom: "conv3_2"
  top: "conv3_2"
}
layer {
  name: "conv3_3"
  type: "Convolution"
  bottom: "conv3_2"
  top: "conv3_3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3_3"
  type: "ReLU"
  bottom: "conv3_3"
  top: "conv3_3"
}
layer {
  name: "pool3"
  type: "Pooling"
  bottom: "conv3_3"
  top: "pool3"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv4_1"
  type: "Convolution"
  bottom: "pool3"
  top: "conv4_1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu4_1"
  type: "ReLU"
  bottom: "conv4_1"
  top: "conv4_1"
}
layer {
  name: "conv4_2"
  type: "Convolution"
  bottom: "conv4_1"
  top: "conv4_2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu4_2"
  type: "ReLU"
  bottom: "conv4_2"
  top: "conv4_2"
}
layer {
  name: "conv4_3"
  type: "Convolution"
  bottom: "conv4_2"
  top: "conv4_3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu4_3"
  type: "ReLU"
  bottom: "conv4_3"
  top: "conv4_3"
}
layer {
  name: "pool4"
  type: "Pooling"
  bottom: "conv4_3"
  top: "pool4"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv5_1"
  type: "Convolution"
  bottom: "pool4"
  top: "conv5_1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu5_1"
  type: "ReLU"
  bottom: "conv5_1"
  top: "conv5_1"
}
layer {
  name: "conv5_2"
  type: "Convolution"
  bottom: "conv5_1"
  top: "conv5_2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu5_2"
  type: "ReLU"
  bottom: "conv5_2"
  top: "conv5_2"
}
layer {
  name: "conv5_3"
  type: "Convolution"
  bottom: "conv5_2"
  top: "conv5_3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu5_3"
  type: "ReLU"
  bottom: "conv5_3"
  top: "conv5_3"
}

#========= RPN ============

layer {
  name: "rpn_conv/3x3"
  type: "Convolution"
  bottom: "conv5_3"
  top: "rpn/output"
  param { lr_mult: 1.0 }
  param { lr_mult: 2.0 }
  convolution_param {
    num_output: 512
    kernel_size: 3 pad: 1 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "rpn_relu/3x3"
  type: "ReLU"
  bottom: "rpn/output"
  top: "rpn/output"
}

layer {
  name: "rpn_cls_score"
  type: "Convolution"
  bottom: "rpn/output"
  top: "rpn_cls_score"
  param { lr_mult: 1.0 }
  param { lr_mult: 2.0 }
  convolution_param {
    num_output: 18   # 2(bg/fg) * 9(anchors)
    kernel_size: 1 pad: 0 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}

layer {
  name: "rpn_bbox_pred"
  type: "Convolution"
  bottom: "rpn/output"
  top: "rpn_bbox_pred"
  param { lr_mult: 1.0 }
  param { lr_mult: 2.0 }
  convolution_param {
    num_output: 36   # 4 * 9(anchors)
    kernel_size: 1 pad: 0 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}

layer {
   bottom: "rpn_cls_score"
   top: "rpn_cls_score_reshape"
   name: "rpn_cls_score_reshape"
   type: "Reshape"
   reshape_param { shape { dim: 0 dim: 2 dim: -1 dim: 0 } }
}

layer {
  name: 'rpn-data'
  type: 'Python'
  bottom: 'rpn_cls_score'
  bottom: 'gt_boxes'
  bottom: 'im_info'
  bottom: 'data'
  top: 'rpn_labels'
  top: 'rpn_bbox_targets'
  top: 'rpn_bbox_inside_weights'
  top: 'rpn_bbox_outside_weights'
  python_param {
    module: 'rpn.anchor_target_layer'
    layer: 'AnchorTargetLayer'
    param_str: "'feat_stride': 16"
  }
}

#========= RoI Proposal ============

layer {
  name: "rpn_cls_prob"
  type: "Softmax"
  bottom: "rpn_cls_score_reshape"
  top: "rpn_cls_prob"
}

layer {
  name: 'rpn_cls_prob_reshape'
  type: 'Reshape'
  bottom: 'rpn_cls_prob'
  top: 'rpn_cls_prob_reshape'
  reshape_param { shape { dim: 0 dim: 18 dim: -1 dim: 0 } }
}

layer {
  name: 'proposal'
  type: 'Python'
  bottom: 'rpn_cls_prob_reshape'
  bottom: 'rpn_bbox_pred'
  bottom: 'im_info'
  top: 'rpn_rois'
#  top: 'rpn_scores'
  python_param {
    module: 'rpn.proposal_layer'
    layer: 'ProposalLayer'
    param_str: "'feat_stride': 16"
  }
}

#layer {
#  name: 'debug-data'
#  type: 'Python'
#  bottom: 'data'
#  bottom: 'rpn_rois'
#  bottom: 'rpn_scores'
#  python_param {
#    module: 'rpn.debug_layer'
#    layer: 'RPNDebugLayer'
#  }
#}

layer {
  name: 'roi-data'
  type: 'Python'
  bottom: 'rpn_rois'
  bottom: 'gt_boxes'
  top: 'rois'
  top: 'labels'
  top: 'bbox_targets'
  top: 'bbox_inside_weights'
  top: 'bbox_outside_weights'
  python_param {
    module: 'rpn.proposal_target_layer'
    layer: 'ProposalTargetLayer'
    param_str: "'num_classes': 9"
  }
}

#========= RCNN ============

layer {
  name: "concat_rois"
  type: "Concat"
  bottom: "rois"
  bottom: "rpn_rois"
  top: "concat_rois"
  concat_param {
    concat_dim: 0
  }
}


layer {
  name: "roi_pool5"
  type: "ROIPooling"
  bottom: "conv5_3"
  bottom: "concat_rois"
  top: "pool5"
  roi_pooling_param {
    pooled_w: 7
    pooled_h: 7
    spatial_scale: 0.0625 # 1/16
  }
}
layer {
  name: "fc6"
  type: "InnerProduct"
  bottom: "pool5"
  top: "fc6"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 4096
  }
}
layer {
  name: "relu6"
  type: "ReLU"
  bottom: "fc6"
  top: "fc6"
}
layer {
  name: "drop6"
  type: "Dropout"
  bottom: "fc6"
  top: "fc6"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc7"
  type: "InnerProduct"
  bottom: "fc6"
  top: "fc7"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 4096
  }
}
layer {
  name: "relu7"
  type: "ReLU"
  bottom: "fc7"
  top: "fc7"
}
layer {
  name: "drop7"
  type: "Dropout"
  bottom: "fc7"
  top: "fc7"
  dropout_param {
    dropout_ratio: 0.5
  }
}


layer {
  name: "slice_feats"
  type: "Slice"
  bottom: "fc7"
  top: "feats_rois_128"
  top: "feats_rois_all"
  slice_param {
    axis: 0
    slice_point: 128
  }
  include: { phase: TRAIN }
}

# ======= Weight adapt Layers ========

layer {
  name: "cls_inner_layer"
  type: "InnerProduct"
  bottom: "fc7"
  top: "cls_inner"
  param {
    lr_mult: 1
  }
  inner_product_param {
    num_output: 512
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
  }
}

layer {
  name: "cls_delta_layer"
  type: "InnerProductCLS"
  bottom: "fc7"
  top: "cls_delta"
  top: "cls_delta_weight"
  inner_product_param {
    num_output: 512
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
  }
}

layer {
  name: "cls_w_add"
  type: "Python"
  bottom: "cls_inner"
  bottom: "cls_delta"
  bottom: "dc_label"
  top: "cls_feat"
  python_param {
    module: 'new_utils.add_layer'
    layer: 'Feat_Add'
  }
}

layer {
  name: "cls_score"
  type: "InnerProduct"
  bottom: "cls_feat"
  top: "cls_score_all"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 9
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  name: "slice_cls"
  type: "Slice"
  bottom: "cls_score_all"
  top: "cls_score"
  top: "cls_score_pros"
  slice_param {
    axis: 0
    slice_point: 128
  }
  include: { phase: TRAIN }
}

layer {
  name: "reg_inner_layer"
  type: "InnerProduct"
  bottom: "fc7"
  top: "reg_inner"
  param {
    lr_mult: 1
  }
  inner_product_param {
    num_output: 1024
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
  }
}

layer {
  name: "reg_delta_layer"
  type: "InnerProductCLS"
  bottom: "fc7"
  top: "reg_delta"
  top: "reg_delta_weight"
  inner_product_param {
    num_output: 1024
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
  }
}

layer {
  name: "reg_w_add"
  type: "Python"
  bottom: "reg_inner"
  bottom: "reg_delta"
  bottom: "dc_label"
  top: "reg_feat"
  python_param {
    module: 'new_utils.add_layer'
    layer: 'Feat_Add'
  }
}

layer {
  name: "bbox_pred"
  type: "InnerProduct"
  bottom: "reg_feat"
  top: "bbox_pred_all"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 36
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  name: "slice_reg"
  type: "Slice"
  bottom: "bbox_pred_all"
  top: "bbox_pred"
  top: "bbox_pred_pros"
  slice_param {
    axis: 0
    slice_point: 128
  }
  include: { phase: TRAIN }
}


# ===== all losses ===== 
layer {
  name: "rpn_loss_cls_filter"
  type: "GradientSilent"
  bottom: "rpn_cls_score_reshape"
  bottom: "need_backprop"
  top: "rpn_cls_score_reshape_filter"
}

layer {
  name: "rpn_loss_cls"
  type: "SoftmaxWithLoss"
  bottom: "rpn_cls_score_reshape_filter"
  bottom: "rpn_labels"
  propagate_down: 1
  propagate_down: 0
  top: "rpn_cls_loss"
  loss_weight: 1
  loss_param {
    ignore_label: -1
    normalize: true
  }
}

layer {
  name: "rpn_loss_bbox_filter"
  type: "GradientSilent"
  bottom: "rpn_bbox_pred"
  bottom: "need_backprop"
  top: "rpn_bbox_pred_filter"
}
layer {
  name: "rpn_loss_bbox"
  type: "SmoothL1Loss"
  bottom: "rpn_bbox_pred_filter"
  bottom: "rpn_bbox_targets"
  bottom: 'rpn_bbox_inside_weights'
  bottom: 'rpn_bbox_outside_weights'
  top: "rpn_loss_bbox"
  loss_weight: 1
  smooth_l1_loss_param { sigma: 3.0 }
}

layer {
  name: "loss_cls_filter"
  type: "GradientSilent"
  bottom: "cls_score"
  bottom: "need_backprop"
  top: "cls_score_filter"
}

layer {
  name: "get_prob"
  type: "Softmax"
  bottom: "cls_score_pros"
  top: "cls_score_probs"
}

layer {
  name: "loss_cls"
  type: "SoftmaxWithLoss"
  bottom: "cls_score_filter"
  bottom: "labels"
  propagate_down: 1
  propagate_down: 0
  top: "loss_cls"
  loss_weight: 1
}

layer {
  name: "loss_bbox_filter"
  type: "GradientSilent"
  bottom: "bbox_pred"
  bottom: "need_backprop"
  top: "bbox_pred_filter"
}
layer {
  name: "loss_bbox"
  type: "SmoothL1Loss"
  bottom: "bbox_pred_filter"
  bottom: "bbox_targets"
  bottom: "bbox_inside_weights"
  bottom: "bbox_outside_weights"
  top: "loss_bbox"
  loss_weight: 1
}


#========= DA loss ============

layer {
  name: "confl"
  type: "Concat"
  bottom: "feats_rois_all"
  bottom: "cls_score_probs"
  bottom: "bbox_pred_pros"
  top: "feat_p_all"
  concat_param {
    concat_dim: 1
  }
}

layer {
  name: "grl"
  type: "Python"
  bottom: "feat_p_all"
  bottom: "dc_label"
  top: "grl"
  top: "dc_score"
  python_param {
    module: 'utils.gradient_scale5'
    layer: 'Gradient_Scale'
    param_str: "'scale': -0.3"
  }
}

layer {
  name: "dc_ip1"
  type: "InnerProduct"
  bottom: "grl"
  top: "dc_ip1"
  param {
    lr_mult: 10
  }
  param {
    lr_mult: 20
  }
  inner_product_param {
    num_output: 1024
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "dc_relu1"
  type: "ReLU"
  bottom: "dc_ip1"
  top: "dc_ip1"
}
layer {
  name: "dc_drop1"
  type: "Dropout"
  bottom: "dc_ip1"
  top: "dc_ip1"
  dropout_param {
    dropout_ratio: 0.5
  }
}

layer {
  name: "dc_ip2"
  type: "InnerProduct"
  bottom: "dc_ip1"
  top: "dc_ip2"
  param {
    lr_mult: 10
  }
  param {
    lr_mult: 20
  }
  inner_product_param {
    num_output: 1024
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "dc_relu2"
  type: "ReLU"
  bottom: "dc_ip2"
  top: "dc_ip2"
}
layer {
  name: "dc_drop2"
  type: "Dropout"
  bottom: "dc_ip2"
  top: "dc_ip2"
  dropout_param {
    dropout_ratio: 0.5
  }
}

layer {
  name: "dc_ip3"
  type: "InnerProduct"
  bottom: "dc_ip2"
  top: "dc_ip3"
  param {
    lr_mult: 10
  }
  param {
    lr_mult: 20
  }
  inner_product_param {
    num_output: 2
    weight_filler {
      type: "gaussian"
      # std: 0.3
      std: 0.05
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  name: "ip3_prob"
  type: "Softmax"
  bottom: "dc_ip3"
  top: "ip3_prob"
  propagate_down: 0
}

layer {
  name: 'dc_soft'
  type: 'Python'
  bottom: 'ip3_prob'
  bottom: 'dc_score'
  python_param {
    module: "utils.data_copy"
    layer: "Data_Copy"
  }
}

layer {
  name: 'dc_label_resize'
  type: 'Python'
  bottom: 'dc_ip3'
  bottom: 'dc_label'
  top: 'dc_label_resize'
  python_param {
    module: 'utils.label_resize_layer'
    layer: 'LabelResizeLayer'
  }
}

layer {
  name: "dc_loss"
  type: "SoftmaxWithLoss"
  bottom: "dc_ip3"
  bottom: "dc_label_resize"
  propagate_down: 1
  propagate_down: 0
  top: "dc_loss"
  loss_weight: 0.1
}


# semantic segmentation section
# conv3_layer

layer {
  name: "da_conv3_grl"
  type: "GradientScaler"
  bottom: "conv3_3"
  top: "conv3_3_grl"
  gradient_scaler_param {
    scale_factor: -0.1
  }
}

layer {
  name: "conv_3_uper"
  type: "Convolution"
  bottom: "conv3_3_grl"
  top: "conv3_up"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 64
    pad: 0
    kernel_size: 1
    weight_filler { type: "gaussian" std: 0.001 }
    bias_filler { type: "constant" value: 0 }
  }
}

layer {
  name: "conv3_up_relu"
  type: "ReLU"
  bottom: "conv3_up"
  top: "conv3_up"
}

layer {
  name: 'conv_3_resize'
  type: 'Enlarge'
  bottom: 'conv3_up'
  top: 'conv3_up_size'
  enlarge_param {
    scale: 4
  }
}

layer {
  name: "da_conv_ss_3"
  type: "Convolution"
  bottom: "conv3_up_size"
  top: "da_conv_ss_3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 0
    kernel_size: 1
    weight_filler { type: "gaussian" std: 0.001 }
    bias_filler { type: "constant" value: 0 }
  }
}

layer {
  name: "da_relu_SS_3"
  type: "ReLU"
  bottom: "da_conv_ss_3"
  top: "da_conv_ss_3"
}

layer {
  name: "da_score_s3"
  type: "Convolution"
  bottom: "da_conv_ss_3"
  top: "da_score_s3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    pad: 0
    kernel_size: 1
    weight_filler { type: "gaussian" std: 0.001 }
    bias_filler { type: "constant" value: 0 }
  }
}

layer {
  name: 'da_label_s3_resize'
  type: 'Python'
  bottom:'da_score_s3'
  bottom:'need_backprop'
  top: 'da_label_s3_resize'
  python_param {
    module: 'utils.resize_sslb'
    layer: 'LabelResizeLayer'
  }
}

layer {
  name: "da_conv_loss3"
  type: "SoftmaxWithLoss"
  bottom: "da_score_s3"
  bottom: "da_label_s3_resize"
  top: "da_conv_loss3"
  loss_param {
    ignore_label: 255
    normalize: 1
  }
  propagate_down: 1
  propagate_down: 0
  loss_weight: 1
}

# conv4_layer

layer {
  name: "da_conv4_grl"
  type: "GradientScaler"
  bottom: "conv4_3"
  top: "conv4_3_grl"
  gradient_scaler_param {
    scale_factor: -0.1
  }
}

layer {
  name: "conv_4_uper"
  type: "Convolution"
  bottom: "conv4_3_grl"
  top: "conv4_up"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 256
    pad: 0
    kernel_size: 1
    weight_filler { type: "gaussian" std: 0.001 }
    bias_filler { type: "constant" value: 0 }
  }
}

layer {
  name: "conv4_up_relu"
  type: "ReLU"
  bottom: "conv4_up"
  top: "conv4_up"
}

layer {
  name: 'conv_4_resize'
  type: 'Enlarge'
  bottom: 'conv4_up'
  top: 'conv4_up_size'
  enlarge_param {
    scale: 2
  }
}

layer {
  name: "da_conv_ss_4"
  type: "Convolution"
  bottom: "conv4_up_size"
  top: "da_conv_ss_4"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 0
    kernel_size: 1
    weight_filler { type: "gaussian" std: 0.001 }
    bias_filler { type: "constant" value: 0 }
  }
}

layer {
  name: "da_relu_SS_4"
  type: "ReLU"
  bottom: "da_conv_ss_4"
  top: "da_conv_ss_4"
}

layer {
  name: "da_score_s4"
  type: "Convolution"
  bottom: "da_conv_ss_4"
  top: "da_score_s4"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    pad: 0
    kernel_size: 1
    weight_filler { type: "gaussian" std: 0.001 }
    bias_filler { type: "constant" value: 0 }
  }
}

layer {
  name: 'da_label_s4_resize'
  type: 'Python'
  bottom:'da_score_s4'
  bottom:'need_backprop'
  top: 'da_label_s4_resize'
  python_param {
    module: 'utils.resize_sslb'
    layer: 'LabelResizeLayer'
  }
}

layer {
  name: "da_conv_loss4"
  type: "SoftmaxWithLoss"
  bottom: "da_score_s4"
  bottom: "da_label_s4_resize"
  top: "da_conv_loss4"
  loss_param {
    ignore_label: 255
    normalize: 1
  }
  propagate_down: 1
  propagate_down: 0
  loss_weight: 1
}

# conv5_layer

layer {
  name: "da_conv5_grl"
  type: "GradientScaler"
  bottom: "conv5_3"
  top: "conv5_3_grl"
  gradient_scaler_param {
    scale_factor: -0.1
  }
}

layer {
  name: "da_conv_ss_5"
  type: "Convolution"
  bottom: "conv5_3_grl"
  top: "da_conv_ss_5"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 0
    kernel_size: 1
    weight_filler { type: "gaussian" std: 0.001 }
    bias_filler { type: "constant" value: 0 }
  }
}

layer {
  name: "da_relu_SS_5"
  type: "ReLU"
  bottom: "da_conv_ss_5"
  top: "da_conv_ss_5"
}

layer {
  name: "da_score_s5"
  type: "Convolution"
  bottom: "da_conv_ss_5"
  top: "da_score_s5"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    pad: 0
    kernel_size: 1
    weight_filler { type: "gaussian" std: 0.001 }
    bias_filler { type: "constant" value: 0 }
  }
}

layer {
  name: 'da_label_s5_resize'
  type: 'Python'
  bottom:'da_score_s5'
  bottom:'need_backprop'
  top: 'da_label_s5_resize'
  python_param {
    module: 'utils.resize_sslb'
    layer: 'LabelResizeLayer'
  }
}

layer {
  name: "da_conv_loss5"
  type: "SoftmaxWithLoss"
  bottom: "da_score_s5"
  bottom: "da_label_s5_resize"
  top: "da_conv_loss5"
  loss_param {
    ignore_label: 255
    normalize: 1
  }
  propagate_down: 1
  propagate_down: 0
  loss_weight: 1
}

# ============= classifier loss functions ================

layer {
  name: "loss_c_delta"
  type: "Python"
  bottom: "cls_delta_weight"
  top: "cls_delta_loss"
  python_param {
    module: 'new_utils.small_w'
    layer: 'Small_w'
    param_str: "'scale': 1"
  }
}

layer {
  name: "loss_r_delta"
  type: "Python"
  bottom: "reg_delta_weight"
  top: "reg_delta_loss"
  python_param {
    module: 'new_utils.small_w'
    layer: 'Small_w'
    param_str: "'scale': 1"
  }
}

layer {
  name: "da_cls_feat"
  type: "GradientScaler"
  bottom: "cls_feat"
  top: "cls_feat_grl"
  gradient_scaler_param {
    scale_factor: -0.1
  }
}

layer {
  name: "cls_ip1"
  type: "InnerProduct"
  bottom: "cls_feat_grl"
  top: "cls_ip1"
  param {
    lr_mult: 10
  }
  param {
    lr_mult: 20
  }
  inner_product_param {
    num_output: 256
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "cls_relu1"
  type: "ReLU"
  bottom: "cls_ip1"
  top: "cls_ip1"
}

layer {
  name: "cls_drop1"
  type: "Dropout"
  bottom: "cls_ip1"
  top: "cls_ip1"
  dropout_param {
    dropout_ratio: 0.5
  }
}

layer {
  name: "cls_ip2"
  type: "InnerProduct"
  bottom: "cls_ip1"
  top: "cls_ip2"
  param {
    lr_mult: 10
  }
  param {
    lr_mult: 20
  }
  inner_product_param {
    num_output: 256
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "cls_relu2"
  type: "ReLU"
  bottom: "cls_ip2"
  top: "cls_ip2"
}

layer {
  name: "cls_drop2"
  type: "Dropout"
  bottom: "cls_ip2"
  top: "cls_ip2"
  dropout_param {
    dropout_ratio: 0.5
  }
}

layer {
  name: "cls_ip3"
  type: "InnerProduct"
  bottom: "cls_ip2"
  top: "cls_ip3"
  param {
    lr_mult: 10
  }
  param {
    lr_mult: 20
  }
  inner_product_param {
    num_output: 2
    weight_filler {
      type: "gaussian"
      # std: 0.3
      std: 0.05
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  name: 'dc_label_resize1'
  type: 'Python'
  bottom: 'cls_ip3'
  bottom: 'dc_label'
  top: 'dc_label_resize1'
  python_param {
    module: 'utils.label_resize_layer'
    layer: 'LabelResizeLayer'
  }
}

layer {
  name: "dc_cls_loss"
  type: "SoftmaxWithLoss"
  bottom: "cls_ip3"
  bottom: "dc_label_resize1"
  propagate_down: 1
  propagate_down: 0
  top: "dc_cls_loss"
  loss_weight: 0.1
}

# =

layer {
  name: "da_reg_feat"
  type: "GradientScaler"
  bottom: "reg_feat"
  top: "reg_feat_grl"
  gradient_scaler_param {
    scale_factor: -0.1
  }
}

layer {
  name: "reg_ip1"
  type: "InnerProduct"
  bottom: "reg_feat_grl"
  top: "reg_ip1"
  param {
    lr_mult: 10
  }
  param {
    lr_mult: 20
  }
  inner_product_param {
    num_output: 512
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "reg_relu1"
  type: "ReLU"
  bottom: "reg_ip1"
  top: "reg_ip1"
}

layer {
  name: "reg_drop1"
  type: "Dropout"
  bottom: "reg_ip1"
  top: "reg_ip1"
  dropout_param {
    dropout_ratio: 0.5
  }
}

layer {
  name: "reg_ip2"
  type: "InnerProduct"
  bottom: "reg_ip1"
  top: "reg_ip2"
  param {
    lr_mult: 10
  }
  param {
    lr_mult: 20
  }
  inner_product_param {
    num_output: 256
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "reg_relu2"
  type: "ReLU"
  bottom: "reg_ip2"
  top: "reg_ip2"
}

layer {
  name: "reg_drop2"
  type: "Dropout"
  bottom: "reg_ip2"
  top: "reg_ip2"
  dropout_param {
    dropout_ratio: 0.5
  }
}

layer {
  name: "reg_ip3"
  type: "InnerProduct"
  bottom: "reg_ip2"
  top: "reg_ip3"
  param {
    lr_mult: 10
  }
  param {
    lr_mult: 20
  }
  inner_product_param {
    num_output: 2
    weight_filler {
      type: "gaussian"
      # std: 0.3
      std: 0.05
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  name: "dc_reg_loss"
  type: "SoftmaxWithLoss"
  bottom: "reg_ip3"
  bottom: "dc_label_resize1"
  propagate_down: 1
  propagate_down: 0
  top: "dc_reg_loss"
  loss_weight: 0.1
}
# ================================================

layer {
  name: "silence"
  type: "Silence"
  bottom: "feats_rois_128"
}
